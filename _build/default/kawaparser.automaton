State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On VAR shift to state 1
-- On var_decls shift to state 9
-- On var_decl shift to state 120
-- On program shift to state 156
## Reductions:
-- On MAIN CLASS
--   reduce production var_decls ->

State 1:
## Known stack suffix:
## VAR
## LR(1) items:
var_decl -> VAR . typ IDENT SEMI [ WHILE VAR TRUE THIS RETURN PRINT NOT NEW MINUS MAIN LPAR INT IF IDENT FALSE END CLASS ]
## Transitions:
-- On VOID shift to state 2
-- On INT_TYPE shift to state 3
-- On IDENT shift to state 4
-- On BOOL_TYPE shift to state 5
-- On typ shift to state 6
## Reductions:

State 2:
## Known stack suffix:
## VOID
## LR(1) items:
typ -> VOID . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> VOID

State 3:
## Known stack suffix:
## INT_TYPE
## LR(1) items:
typ -> INT_TYPE . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> INT_TYPE

State 4:
## Known stack suffix:
## IDENT
## LR(1) items:
typ -> IDENT . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> IDENT

State 5:
## Known stack suffix:
## BOOL_TYPE
## LR(1) items:
typ -> BOOL_TYPE . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> BOOL_TYPE

State 6:
## Known stack suffix:
## VAR typ
## LR(1) items:
var_decl -> VAR typ . IDENT SEMI [ WHILE VAR TRUE THIS RETURN PRINT NOT NEW MINUS MAIN LPAR INT IF IDENT FALSE END CLASS ]
## Transitions:
-- On IDENT shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## VAR typ IDENT
## LR(1) items:
var_decl -> VAR typ IDENT . SEMI [ WHILE VAR TRUE THIS RETURN PRINT NOT NEW MINUS MAIN LPAR INT IF IDENT FALSE END CLASS ]
## Transitions:
-- On SEMI shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## VAR typ IDENT SEMI
## LR(1) items:
var_decl -> VAR typ IDENT SEMI . [ WHILE VAR TRUE THIS RETURN PRINT NOT NEW MINUS MAIN LPAR INT IF IDENT FALSE END CLASS ]
## Transitions:
## Reductions:
-- On WHILE VAR TRUE THIS RETURN PRINT NOT NEW MINUS MAIN LPAR INT IF IDENT FALSE END CLASS
--   reduce production var_decl -> VAR typ IDENT SEMI

State 9:
## Known stack suffix:
## var_decls
## LR(1) items:
program -> var_decls . classes MAIN BEGIN seq END EOF [ # ]
## Transitions:
-- On CLASS shift to state 10
-- On classes shift to state 148
-- On class_def shift to state 154
## Reductions:
-- On MAIN
--   reduce production classes ->

State 10:
## Known stack suffix:
## CLASS
## LR(1) items:
class_def -> CLASS . IDENT BEGIN attr_decls method_defs END [ MAIN CLASS ]
class_def -> CLASS . IDENT EXTENDS IDENT BEGIN attr_decls method_defs END [ MAIN CLASS ]
## Transitions:
-- On IDENT shift to state 11
## Reductions:

State 11:
## Known stack suffix:
## CLASS IDENT
## LR(1) items:
class_def -> CLASS IDENT . BEGIN attr_decls method_defs END [ MAIN CLASS ]
class_def -> CLASS IDENT . EXTENDS IDENT BEGIN attr_decls method_defs END [ MAIN CLASS ]
## Transitions:
-- On EXTENDS shift to state 12
-- On BEGIN shift to state 144
## Reductions:

State 12:
## Known stack suffix:
## CLASS IDENT EXTENDS
## LR(1) items:
class_def -> CLASS IDENT EXTENDS . IDENT BEGIN attr_decls method_defs END [ MAIN CLASS ]
## Transitions:
-- On IDENT shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## CLASS IDENT EXTENDS IDENT
## LR(1) items:
class_def -> CLASS IDENT EXTENDS IDENT . BEGIN attr_decls method_defs END [ MAIN CLASS ]
## Transitions:
-- On BEGIN shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## CLASS IDENT EXTENDS IDENT BEGIN
## LR(1) items:
class_def -> CLASS IDENT EXTENDS IDENT BEGIN . attr_decls method_defs END [ MAIN CLASS ]
## Transitions:
-- On ATTR shift to state 15
-- On attr_decls shift to state 19
-- On attr_decl shift to state 142
## Reductions:
-- On METHOD END
--   reduce production attr_decls ->

State 15:
## Known stack suffix:
## ATTR
## LR(1) items:
attr_decl -> ATTR . typ IDENT SEMI [ METHOD END ATTR ]
## Transitions:
-- On VOID shift to state 2
-- On INT_TYPE shift to state 3
-- On IDENT shift to state 4
-- On BOOL_TYPE shift to state 5
-- On typ shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## ATTR typ
## LR(1) items:
attr_decl -> ATTR typ . IDENT SEMI [ METHOD END ATTR ]
## Transitions:
-- On IDENT shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## ATTR typ IDENT
## LR(1) items:
attr_decl -> ATTR typ IDENT . SEMI [ METHOD END ATTR ]
## Transitions:
-- On SEMI shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## ATTR typ IDENT SEMI
## LR(1) items:
attr_decl -> ATTR typ IDENT SEMI . [ METHOD END ATTR ]
## Transitions:
## Reductions:
-- On METHOD END ATTR
--   reduce production attr_decl -> ATTR typ IDENT SEMI

State 19:
## Known stack suffix:
## CLASS IDENT EXTENDS IDENT BEGIN attr_decls
## LR(1) items:
class_def -> CLASS IDENT EXTENDS IDENT BEGIN attr_decls . method_defs END [ MAIN CLASS ]
## Transitions:
-- On METHOD shift to state 20
-- On method_defs shift to state 138
-- On method_def shift to state 140
## Reductions:
-- On END
--   reduce production method_defs ->

State 20:
## Known stack suffix:
## METHOD
## LR(1) items:
method_def -> METHOD . typ IDENT LPAR params RPAR BEGIN var_decls seq RETURN expression SEMI END [ METHOD END ]
method_def -> METHOD . VOID IDENT LPAR params RPAR BEGIN var_decls seq END [ METHOD END ]
method_def -> METHOD . typ IDENT LPAR params RPAR BEGIN RETURN expression SEMI END [ METHOD END ]
## Transitions:
-- On VOID shift to state 21
-- On INT_TYPE shift to state 3
-- On IDENT shift to state 4
-- On BOOL_TYPE shift to state 5
-- On typ shift to state 122
## Reductions:

State 21:
## Known stack suffix:
## METHOD VOID
## LR(1) items:
method_def -> METHOD VOID . IDENT LPAR params RPAR BEGIN var_decls seq END [ METHOD END ]
typ -> VOID . [ IDENT ]
## Transitions:
-- On IDENT shift to state 22
## Reductions:
-- On IDENT
--   reduce production typ -> VOID
** Conflict on IDENT

State 22:
## Known stack suffix:
## METHOD VOID IDENT
## LR(1) items:
method_def -> METHOD VOID IDENT . LPAR params RPAR BEGIN var_decls seq END [ METHOD END ]
## Transitions:
-- On LPAR shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## METHOD VOID IDENT LPAR
## LR(1) items:
method_def -> METHOD VOID IDENT LPAR . params RPAR BEGIN var_decls seq END [ METHOD END ]
## Transitions:
-- On VOID shift to state 2
-- On INT_TYPE shift to state 3
-- On IDENT shift to state 4
-- On BOOL_TYPE shift to state 5
-- On typ shift to state 24
-- On params shift to state 28
## Reductions:
-- On RPAR
--   reduce production params ->

State 24:
## Known stack suffix:
## typ
## LR(1) items:
params -> typ . IDENT [ RPAR ]
params -> typ . IDENT COMMA params [ RPAR ]
## Transitions:
-- On IDENT shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## typ IDENT
## LR(1) items:
params -> typ IDENT . [ RPAR ]
params -> typ IDENT . COMMA params [ RPAR ]
## Transitions:
-- On COMMA shift to state 26
## Reductions:
-- On RPAR
--   reduce production params -> typ IDENT

State 26:
## Known stack suffix:
## typ IDENT COMMA
## LR(1) items:
params -> typ IDENT COMMA . params [ RPAR ]
## Transitions:
-- On VOID shift to state 2
-- On INT_TYPE shift to state 3
-- On IDENT shift to state 4
-- On BOOL_TYPE shift to state 5
-- On typ shift to state 24
-- On params shift to state 27
## Reductions:
-- On RPAR
--   reduce production params ->

State 27:
## Known stack suffix:
## typ IDENT COMMA params
## LR(1) items:
params -> typ IDENT COMMA params . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production params -> typ IDENT COMMA params

State 28:
## Known stack suffix:
## METHOD VOID IDENT LPAR params
## LR(1) items:
method_def -> METHOD VOID IDENT LPAR params . RPAR BEGIN var_decls seq END [ METHOD END ]
## Transitions:
-- On RPAR shift to state 29
## Reductions:

State 29:
## Known stack suffix:
## METHOD VOID IDENT LPAR params RPAR
## LR(1) items:
method_def -> METHOD VOID IDENT LPAR params RPAR . BEGIN var_decls seq END [ METHOD END ]
## Transitions:
-- On BEGIN shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## METHOD VOID IDENT LPAR params RPAR BEGIN
## LR(1) items:
method_def -> METHOD VOID IDENT LPAR params RPAR BEGIN . var_decls seq END [ METHOD END ]
## Transitions:
-- On VAR shift to state 1
-- On var_decls shift to state 31
-- On var_decl shift to state 120
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END
--   reduce production var_decls ->

State 31:
## Known stack suffix:
## METHOD VOID IDENT LPAR params RPAR BEGIN var_decls
## LR(1) items:
method_def -> METHOD VOID IDENT LPAR params RPAR BEGIN var_decls . seq END [ METHOD END ]
## Transitions:
-- On WHILE shift to state 32
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On RETURN shift to state 89
-- On PRINT shift to state 92
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IF shift to state 97
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On seq shift to state 118
-- On mem shift to state 108
-- On instruction shift to state 112
-- On expression shift to state 114
## Reductions:
-- On END
--   reduce production seq ->

State 32:
## Known stack suffix:
## WHILE
## LR(1) items:
instruction -> WHILE . LPAR expression RPAR BEGIN seq END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On LPAR shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## WHILE LPAR
## LR(1) items:
instruction -> WHILE LPAR . expression RPAR BEGIN seq END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 86
## Reductions:

State 34:
## Known stack suffix:
## TRUE
## LR(1) items:
expression -> TRUE . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND
--   reduce production expression -> TRUE

State 35:
## Known stack suffix:
## THIS
## LR(1) items:
expression -> THIS . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND
--   reduce production expression -> THIS

State 36:
## Known stack suffix:
## NOT
## LR(1) items:
expression -> NOT . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 85
## Reductions:

State 37:
## Known stack suffix:
## NEW
## LR(1) items:
expression -> NEW . IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> NEW . IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On IDENT shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## NEW IDENT
## LR(1) items:
expression -> NEW IDENT . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> NEW IDENT . LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On LPAR shift to state 39
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND
--   reduce production expression -> NEW IDENT

State 39:
## Known stack suffix:
## NEW IDENT LPAR
## LR(1) items:
expression -> NEW IDENT LPAR . exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On exprs shift to state 83
-- On expression shift to state 61
## Reductions:
-- On RPAR
--   reduce production exprs ->

State 40:
## Known stack suffix:
## MINUS
## LR(1) items:
expression -> MINUS . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 82
## Reductions:

State 41:
## Known stack suffix:
## LPAR
## LR(1) items:
expression -> LPAR . expression RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 46
## Reductions:

State 42:
## Known stack suffix:
## INT
## LR(1) items:
expression -> INT . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND
--   reduce production expression -> INT

State 43:
## Known stack suffix:
## IDENT
## LR(1) items:
mem -> IDENT . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA ASSIGN AND ]
## Transitions:
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA ASSIGN AND
--   reduce production mem -> IDENT

State 44:
## Known stack suffix:
## FALSE
## LR(1) items:
expression -> FALSE . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND
--   reduce production expression -> FALSE

State 45:
## Known stack suffix:
## mem
## LR(1) items:
expression -> mem . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND
--   reduce production expression -> mem

State 46:
## Known stack suffix:
## LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MINUS expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MUL expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DIV expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . EQUAL expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . NEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LT expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . AND expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . OR expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GT expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . REM expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> LPAR expression . RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
mem -> expression . DOT IDENT [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
## Transitions:
-- On RPAR shift to state 47
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On NEQ shift to state 62
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQUAL shift to state 78
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:

State 47:
## Known stack suffix:
## LPAR expression RPAR
## LR(1) items:
expression -> LPAR expression RPAR . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND
--   reduce production expression -> LPAR expression RPAR

State 48:
## Known stack suffix:
## expression REM
## LR(1) items:
expression -> expression REM . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 49
## Reductions:

State 49:
## Known stack suffix:
## expression REM expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression REM expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On OR shift to state 50
-- On DOT shift to state 56
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DIV COMMA AND
--   reduce production expression -> expression REM expression
** Conflict on OR AND

State 50:
## Known stack suffix:
## expression OR
## LR(1) items:
expression -> expression OR . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 51
## Reductions:

State 51:
## Known stack suffix:
## expression OR expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression OR expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On NEQ shift to state 62
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQUAL shift to state 78
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND
--   reduce production expression -> expression OR expression
** Conflict on REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND

State 52:
## Known stack suffix:
## expression PLUS
## LR(1) items:
expression -> expression PLUS . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression PLUS expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On REM shift to state 48
-- On OR shift to state 50
-- On MUL shift to state 54
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL COMMA AND
--   reduce production expression -> expression PLUS expression
** Conflict on OR AND

State 54:
## Known stack suffix:
## expression MUL
## LR(1) items:
expression -> expression MUL . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## expression MUL expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression MUL expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On OR shift to state 50
-- On DOT shift to state 56
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DIV COMMA AND
--   reduce production expression -> expression MUL expression
** Conflict on OR AND

State 56:
## Known stack suffix:
## expression DOT
## LR(1) items:
expression -> expression DOT . IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression DOT . IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA ASSIGN AND ]
## Transitions:
-- On IDENT shift to state 57
## Reductions:

State 57:
## Known stack suffix:
## expression DOT IDENT
## LR(1) items:
expression -> expression DOT IDENT . LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression DOT IDENT . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA ASSIGN AND ]
## Transitions:
-- On LPAR shift to state 58
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA ASSIGN AND
--   reduce production mem -> expression DOT IDENT

State 58:
## Known stack suffix:
## expression DOT IDENT LPAR
## LR(1) items:
expression -> expression DOT IDENT LPAR . exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On exprs shift to state 59
-- On expression shift to state 61
## Reductions:
-- On RPAR
--   reduce production exprs ->

State 59:
## Known stack suffix:
## expression DOT IDENT LPAR exprs
## LR(1) items:
expression -> expression DOT IDENT LPAR exprs . RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On RPAR shift to state 60
## Reductions:

State 60:
## Known stack suffix:
## expression DOT IDENT LPAR exprs RPAR
## LR(1) items:
expression -> expression DOT IDENT LPAR exprs RPAR . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND
--   reduce production expression -> expression DOT IDENT LPAR exprs RPAR

State 61:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
exprs -> expression . [ RPAR ]
exprs -> expression . COMMA exprs [ RPAR ]
mem -> expression . DOT IDENT [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On NEQ shift to state 62
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQUAL shift to state 78
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On COMMA shift to state 80
-- On AND shift to state 68
## Reductions:
-- On RPAR
--   reduce production exprs -> expression

State 62:
## Known stack suffix:
## expression NEQ
## LR(1) items:
expression -> expression NEQ . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 63
## Reductions:

State 63:
## Known stack suffix:
## expression NEQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression NEQ expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR OR COMMA AND
--   reduce production expression -> expression NEQ expression
** Conflict on OR AND

State 64:
## Known stack suffix:
## expression MINUS
## LR(1) items:
expression -> expression MINUS . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## expression MINUS expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression MINUS expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On REM shift to state 48
-- On OR shift to state 50
-- On MUL shift to state 54
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL COMMA AND
--   reduce production expression -> expression MINUS expression
** Conflict on OR AND

State 66:
## Known stack suffix:
## expression DIV
## LR(1) items:
expression -> expression DIV . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## expression DIV expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression DIV expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On OR shift to state 50
-- On DOT shift to state 56
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DIV COMMA AND
--   reduce production expression -> expression DIV expression
** Conflict on OR AND

State 68:
## Known stack suffix:
## expression AND
## LR(1) items:
expression -> expression AND . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## expression AND expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression AND expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On NEQ shift to state 62
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQUAL shift to state 78
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND
--   reduce production expression -> expression AND expression
** Conflict on REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND

State 70:
## Known stack suffix:
## expression LT
## LR(1) items:
expression -> expression LT . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 71
## Reductions:

State 71:
## Known stack suffix:
## expression LT expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression LT expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR OR COMMA AND
--   reduce production expression -> expression LT expression
** Conflict on OR AND

State 72:
## Known stack suffix:
## expression LEQ
## LR(1) items:
expression -> expression LEQ . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## expression LEQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression LEQ expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR OR COMMA AND
--   reduce production expression -> expression LEQ expression
** Conflict on OR AND

State 74:
## Known stack suffix:
## expression GT
## LR(1) items:
expression -> expression GT . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 75
## Reductions:

State 75:
## Known stack suffix:
## expression GT expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression GT expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR OR COMMA AND
--   reduce production expression -> expression GT expression
** Conflict on OR AND

State 76:
## Known stack suffix:
## expression GEQ
## LR(1) items:
expression -> expression GEQ . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## expression GEQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression GEQ expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR OR COMMA AND
--   reduce production expression -> expression GEQ expression
** Conflict on OR AND

State 78:
## Known stack suffix:
## expression EQUAL
## LR(1) items:
expression -> expression EQUAL . expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 79
## Reductions:

State 79:
## Known stack suffix:
## expression EQUAL expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression EQUAL expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR OR COMMA AND
--   reduce production expression -> expression EQUAL expression
** Conflict on OR AND

State 80:
## Known stack suffix:
## expression COMMA
## LR(1) items:
exprs -> expression COMMA . exprs [ RPAR ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On exprs shift to state 81
-- On expression shift to state 61
## Reductions:
-- On RPAR
--   reduce production exprs ->

State 81:
## Known stack suffix:
## expression COMMA exprs
## LR(1) items:
exprs -> expression COMMA exprs . [ RPAR ]
## Transitions:
## Reductions:
-- On RPAR
--   reduce production exprs -> expression COMMA exprs

State 82:
## Known stack suffix:
## MINUS expression
## LR(1) items:
expression -> MINUS expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On REM shift to state 48
-- On OR shift to state 50
-- On MUL shift to state 54
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL COMMA AND
--   reduce production expression -> MINUS expression
** Conflict on OR AND

State 83:
## Known stack suffix:
## NEW IDENT LPAR exprs
## LR(1) items:
expression -> NEW IDENT LPAR exprs . RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On RPAR shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## NEW IDENT LPAR exprs RPAR
## LR(1) items:
expression -> NEW IDENT LPAR exprs RPAR . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND
--   reduce production expression -> NEW IDENT LPAR exprs RPAR

State 85:
## Known stack suffix:
## NOT expression
## LR(1) items:
expression -> NOT expression . [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . PLUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MINUS expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . MUL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DIV expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . EQUAL expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . NEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . LEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . AND expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . OR expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GT expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . GEQ expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . REM expression [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
mem -> expression . DOT IDENT [ SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND ]
## Transitions:
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On NEQ shift to state 62
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQUAL shift to state 78
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:
-- On SEMI RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV COMMA AND
--   reduce production expression -> NOT expression
** Conflict on REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND

State 86:
## Known stack suffix:
## WHILE LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MINUS expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MUL expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DIV expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . EQUAL expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . NEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LT expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . AND expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . OR expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GT expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . REM expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
instruction -> WHILE LPAR expression . RPAR BEGIN seq END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
mem -> expression . DOT IDENT [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
## Transitions:
-- On RPAR shift to state 87
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On NEQ shift to state 62
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQUAL shift to state 78
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:

State 87:
## Known stack suffix:
## WHILE LPAR expression RPAR
## LR(1) items:
instruction -> WHILE LPAR expression RPAR . BEGIN seq END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On BEGIN shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN . seq END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On WHILE shift to state 32
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On RETURN shift to state 89
-- On PRINT shift to state 92
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IF shift to state 97
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On seq shift to state 116
-- On mem shift to state 108
-- On instruction shift to state 112
-- On expression shift to state 114
## Reductions:
-- On END
--   reduce production seq ->

State 89:
## Known stack suffix:
## RETURN
## LR(1) items:
instruction -> RETURN . expression SEMI [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 90
## Reductions:

State 90:
## Known stack suffix:
## RETURN expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MINUS expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MUL expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DIV expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . EQUAL expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . NEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LT expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . AND expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . OR expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GT expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . REM expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
instruction -> RETURN expression . SEMI [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
mem -> expression . DOT IDENT [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
## Transitions:
-- On SEMI shift to state 91
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On NEQ shift to state 62
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQUAL shift to state 78
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:

State 91:
## Known stack suffix:
## RETURN expression SEMI
## LR(1) items:
instruction -> RETURN expression SEMI . [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END
--   reduce production instruction -> RETURN expression SEMI

State 92:
## Known stack suffix:
## PRINT
## LR(1) items:
instruction -> PRINT . LPAR expression RPAR SEMI [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On LPAR shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## PRINT LPAR
## LR(1) items:
instruction -> PRINT LPAR . expression RPAR SEMI [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 94
## Reductions:

State 94:
## Known stack suffix:
## PRINT LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MINUS expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MUL expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DIV expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . EQUAL expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . NEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LT expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . AND expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . OR expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GT expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . REM expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
instruction -> PRINT LPAR expression . RPAR SEMI [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
mem -> expression . DOT IDENT [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
## Transitions:
-- On RPAR shift to state 95
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On NEQ shift to state 62
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQUAL shift to state 78
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:

State 95:
## Known stack suffix:
## PRINT LPAR expression RPAR
## LR(1) items:
instruction -> PRINT LPAR expression RPAR . SEMI [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On SEMI shift to state 96
## Reductions:

State 96:
## Known stack suffix:
## PRINT LPAR expression RPAR SEMI
## LR(1) items:
instruction -> PRINT LPAR expression RPAR SEMI . [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END
--   reduce production instruction -> PRINT LPAR expression RPAR SEMI

State 97:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . LPAR expression RPAR BEGIN seq END ELSE BEGIN seq END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On LPAR shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## IF LPAR
## LR(1) items:
instruction -> IF LPAR . expression RPAR BEGIN seq END ELSE BEGIN seq END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 99
## Reductions:

State 99:
## Known stack suffix:
## IF LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MINUS expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MUL expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DIV expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . EQUAL expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . NEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LT expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . AND expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . OR expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GT expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GEQ expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . REM expression [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
instruction -> IF LPAR expression . RPAR BEGIN seq END ELSE BEGIN seq END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
mem -> expression . DOT IDENT [ RPAR REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
## Transitions:
-- On RPAR shift to state 100
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On NEQ shift to state 62
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQUAL shift to state 78
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:

State 100:
## Known stack suffix:
## IF LPAR expression RPAR
## LR(1) items:
instruction -> IF LPAR expression RPAR . BEGIN seq END ELSE BEGIN seq END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On BEGIN shift to state 101
## Reductions:

State 101:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN . seq END ELSE BEGIN seq END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On WHILE shift to state 32
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On RETURN shift to state 89
-- On PRINT shift to state 92
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IF shift to state 97
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On seq shift to state 102
-- On mem shift to state 108
-- On instruction shift to state 112
-- On expression shift to state 114
## Reductions:
-- On END
--   reduce production seq ->

State 102:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN seq
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN seq . END ELSE BEGIN seq END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On END shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN seq END
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN seq END . ELSE BEGIN seq END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On ELSE shift to state 104
## Reductions:

State 104:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN seq END ELSE
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN seq END ELSE . BEGIN seq END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On BEGIN shift to state 105
## Reductions:

State 105:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN seq END ELSE BEGIN
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN seq END ELSE BEGIN . seq END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On WHILE shift to state 32
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On RETURN shift to state 89
-- On PRINT shift to state 92
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IF shift to state 97
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On seq shift to state 106
-- On mem shift to state 108
-- On instruction shift to state 112
-- On expression shift to state 114
## Reductions:
-- On END
--   reduce production seq ->

State 106:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN seq END ELSE BEGIN seq
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN seq END ELSE BEGIN seq . END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On END shift to state 107
## Reductions:

State 107:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN seq END ELSE BEGIN seq END
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN seq END ELSE BEGIN seq END . [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END
--   reduce production instruction -> IF LPAR expression RPAR BEGIN seq END ELSE BEGIN seq END

State 108:
## Known stack suffix:
## mem
## LR(1) items:
expression -> mem . [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
instruction -> mem . ASSIGN expression SEMI [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On ASSIGN shift to state 109
## Reductions:
-- On SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND
--   reduce production expression -> mem

State 109:
## Known stack suffix:
## mem ASSIGN
## LR(1) items:
instruction -> mem ASSIGN . expression SEMI [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## mem ASSIGN expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MINUS expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MUL expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DIV expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . EQUAL expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . NEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LT expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . AND expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . OR expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GT expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . REM expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
instruction -> mem ASSIGN expression . SEMI [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
mem -> expression . DOT IDENT [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
## Transitions:
-- On SEMI shift to state 111
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On NEQ shift to state 62
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQUAL shift to state 78
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:

State 111:
## Known stack suffix:
## mem ASSIGN expression SEMI
## LR(1) items:
instruction -> mem ASSIGN expression SEMI . [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END
--   reduce production instruction -> mem ASSIGN expression SEMI

State 112:
## Known stack suffix:
## instruction
## LR(1) items:
seq -> instruction . seq [ RETURN END ]
## Transitions:
-- On WHILE shift to state 32
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On RETURN shift to state 89
-- On PRINT shift to state 92
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IF shift to state 97
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On seq shift to state 113
-- On mem shift to state 108
-- On instruction shift to state 112
-- On expression shift to state 114
## Reductions:
-- On RETURN END
--   reduce production seq ->
** Conflict on RETURN

State 113:
## Known stack suffix:
## instruction seq
## LR(1) items:
seq -> instruction seq . [ RETURN END ]
## Transitions:
## Reductions:
-- On RETURN END
--   reduce production seq -> instruction seq

State 114:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MINUS expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MUL expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DIV expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . EQUAL expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . NEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LT expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . AND expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . OR expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GT expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . REM expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
instruction -> expression . SEMI [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
mem -> expression . DOT IDENT [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV ASSIGN AND ]
## Transitions:
-- On SEMI shift to state 115
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On NEQ shift to state 62
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQUAL shift to state 78
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:

State 115:
## Known stack suffix:
## expression SEMI
## LR(1) items:
instruction -> expression SEMI . [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END
--   reduce production instruction -> expression SEMI

State 116:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN seq
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN seq . END [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
-- On END shift to state 117
## Reductions:

State 117:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN seq END
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN seq END . [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE END
--   reduce production instruction -> WHILE LPAR expression RPAR BEGIN seq END

State 118:
## Known stack suffix:
## METHOD VOID IDENT LPAR params RPAR BEGIN var_decls seq
## LR(1) items:
method_def -> METHOD VOID IDENT LPAR params RPAR BEGIN var_decls seq . END [ METHOD END ]
## Transitions:
-- On END shift to state 119
## Reductions:

State 119:
## Known stack suffix:
## METHOD VOID IDENT LPAR params RPAR BEGIN var_decls seq END
## LR(1) items:
method_def -> METHOD VOID IDENT LPAR params RPAR BEGIN var_decls seq END . [ METHOD END ]
## Transitions:
## Reductions:
-- On METHOD END
--   reduce production method_def -> METHOD VOID IDENT LPAR params RPAR BEGIN var_decls seq END

State 120:
## Known stack suffix:
## var_decl
## LR(1) items:
var_decls -> var_decl . [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS MAIN LPAR INT IF IDENT FALSE END CLASS ]
var_decls -> var_decl . var_decls [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS MAIN LPAR INT IF IDENT FALSE END CLASS ]
## Transitions:
-- On VAR shift to state 1
-- On var_decls shift to state 121
-- On var_decl shift to state 120
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NOT NEW MINUS MAIN LPAR INT IF IDENT FALSE END CLASS
--   reduce production var_decls ->
-- On WHILE TRUE THIS RETURN PRINT NOT NEW MINUS MAIN LPAR INT IF IDENT FALSE END CLASS
--   reduce production var_decls -> var_decl
** Conflict on WHILE TRUE THIS RETURN PRINT NOT NEW MINUS MAIN LPAR INT IF IDENT FALSE END CLASS

State 121:
## Known stack suffix:
## var_decl var_decls
## LR(1) items:
var_decls -> var_decl var_decls . [ WHILE TRUE THIS RETURN PRINT NOT NEW MINUS MAIN LPAR INT IF IDENT FALSE END CLASS ]
## Transitions:
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NOT NEW MINUS MAIN LPAR INT IF IDENT FALSE END CLASS
--   reduce production var_decls -> var_decl var_decls

State 122:
## Known stack suffix:
## METHOD typ
## LR(1) items:
method_def -> METHOD typ . IDENT LPAR params RPAR BEGIN var_decls seq RETURN expression SEMI END [ METHOD END ]
method_def -> METHOD typ . IDENT LPAR params RPAR BEGIN RETURN expression SEMI END [ METHOD END ]
## Transitions:
-- On IDENT shift to state 123
## Reductions:

State 123:
## Known stack suffix:
## METHOD typ IDENT
## LR(1) items:
method_def -> METHOD typ IDENT . LPAR params RPAR BEGIN var_decls seq RETURN expression SEMI END [ METHOD END ]
method_def -> METHOD typ IDENT . LPAR params RPAR BEGIN RETURN expression SEMI END [ METHOD END ]
## Transitions:
-- On LPAR shift to state 124
## Reductions:

State 124:
## Known stack suffix:
## METHOD typ IDENT LPAR
## LR(1) items:
method_def -> METHOD typ IDENT LPAR . params RPAR BEGIN var_decls seq RETURN expression SEMI END [ METHOD END ]
method_def -> METHOD typ IDENT LPAR . params RPAR BEGIN RETURN expression SEMI END [ METHOD END ]
## Transitions:
-- On VOID shift to state 2
-- On INT_TYPE shift to state 3
-- On IDENT shift to state 4
-- On BOOL_TYPE shift to state 5
-- On typ shift to state 24
-- On params shift to state 125
## Reductions:
-- On RPAR
--   reduce production params ->

State 125:
## Known stack suffix:
## METHOD typ IDENT LPAR params
## LR(1) items:
method_def -> METHOD typ IDENT LPAR params . RPAR BEGIN var_decls seq RETURN expression SEMI END [ METHOD END ]
method_def -> METHOD typ IDENT LPAR params . RPAR BEGIN RETURN expression SEMI END [ METHOD END ]
## Transitions:
-- On RPAR shift to state 126
## Reductions:

State 126:
## Known stack suffix:
## METHOD typ IDENT LPAR params RPAR
## LR(1) items:
method_def -> METHOD typ IDENT LPAR params RPAR . BEGIN var_decls seq RETURN expression SEMI END [ METHOD END ]
method_def -> METHOD typ IDENT LPAR params RPAR . BEGIN RETURN expression SEMI END [ METHOD END ]
## Transitions:
-- On BEGIN shift to state 127
## Reductions:

State 127:
## Known stack suffix:
## METHOD typ IDENT LPAR params RPAR BEGIN
## LR(1) items:
method_def -> METHOD typ IDENT LPAR params RPAR BEGIN . var_decls seq RETURN expression SEMI END [ METHOD END ]
method_def -> METHOD typ IDENT LPAR params RPAR BEGIN . RETURN expression SEMI END [ METHOD END ]
## Transitions:
-- On VAR shift to state 1
-- On RETURN shift to state 128
-- On var_decls shift to state 132
-- On var_decl shift to state 120
## Reductions:
-- On WHILE TRUE THIS RETURN PRINT NOT NEW MINUS LPAR INT IF IDENT FALSE
--   reduce production var_decls ->
** Conflict on RETURN

State 128:
## Known stack suffix:
## METHOD typ IDENT LPAR params RPAR BEGIN RETURN
## LR(1) items:
method_def -> METHOD typ IDENT LPAR params RPAR BEGIN RETURN . expression SEMI END [ METHOD END ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 129
## Reductions:

State 129:
## Known stack suffix:
## METHOD typ IDENT LPAR params RPAR BEGIN RETURN expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MINUS expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MUL expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DIV expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . EQUAL expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . NEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LT expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . AND expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . OR expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GT expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . REM expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
mem -> expression . DOT IDENT [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
method_def -> METHOD typ IDENT LPAR params RPAR BEGIN RETURN expression . SEMI END [ METHOD END ]
## Transitions:
-- On SEMI shift to state 130
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On NEQ shift to state 62
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQUAL shift to state 78
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:

State 130:
## Known stack suffix:
## METHOD typ IDENT LPAR params RPAR BEGIN RETURN expression SEMI
## LR(1) items:
method_def -> METHOD typ IDENT LPAR params RPAR BEGIN RETURN expression SEMI . END [ METHOD END ]
## Transitions:
-- On END shift to state 131
## Reductions:

State 131:
## Known stack suffix:
## METHOD typ IDENT LPAR params RPAR BEGIN RETURN expression SEMI END
## LR(1) items:
method_def -> METHOD typ IDENT LPAR params RPAR BEGIN RETURN expression SEMI END . [ METHOD END ]
## Transitions:
## Reductions:
-- On METHOD END
--   reduce production method_def -> METHOD typ IDENT LPAR params RPAR BEGIN RETURN expression SEMI END

State 132:
## Known stack suffix:
## METHOD typ IDENT LPAR params RPAR BEGIN var_decls
## LR(1) items:
method_def -> METHOD typ IDENT LPAR params RPAR BEGIN var_decls . seq RETURN expression SEMI END [ METHOD END ]
## Transitions:
-- On WHILE shift to state 32
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On RETURN shift to state 89
-- On PRINT shift to state 92
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IF shift to state 97
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On seq shift to state 133
-- On mem shift to state 108
-- On instruction shift to state 112
-- On expression shift to state 114
## Reductions:
-- On RETURN
--   reduce production seq ->
** Conflict on RETURN

State 133:
## Known stack suffix:
## METHOD typ IDENT LPAR params RPAR BEGIN var_decls seq
## LR(1) items:
method_def -> METHOD typ IDENT LPAR params RPAR BEGIN var_decls seq . RETURN expression SEMI END [ METHOD END ]
## Transitions:
-- On RETURN shift to state 134
## Reductions:

State 134:
## Known stack suffix:
## METHOD typ IDENT LPAR params RPAR BEGIN var_decls seq RETURN
## LR(1) items:
method_def -> METHOD typ IDENT LPAR params RPAR BEGIN var_decls seq RETURN . expression SEMI END [ METHOD END ]
## Transitions:
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On mem shift to state 45
-- On expression shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## METHOD typ IDENT LPAR params RPAR BEGIN var_decls seq RETURN expression
## LR(1) items:
expression -> expression . PLUS expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MINUS expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . MUL expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DIV expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . EQUAL expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . NEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LT expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . LEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . AND expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . OR expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GT expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . GEQ expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . REM expression [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
expression -> expression . DOT IDENT LPAR exprs RPAR [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
mem -> expression . DOT IDENT [ SEMI REM PLUS OR NEQ MUL MINUS LT LEQ GT GEQ EQUAL DOT DIV AND ]
method_def -> METHOD typ IDENT LPAR params RPAR BEGIN var_decls seq RETURN expression . SEMI END [ METHOD END ]
## Transitions:
-- On SEMI shift to state 136
-- On REM shift to state 48
-- On PLUS shift to state 52
-- On OR shift to state 50
-- On NEQ shift to state 62
-- On MUL shift to state 54
-- On MINUS shift to state 64
-- On LT shift to state 70
-- On LEQ shift to state 72
-- On GT shift to state 74
-- On GEQ shift to state 76
-- On EQUAL shift to state 78
-- On DOT shift to state 56
-- On DIV shift to state 66
-- On AND shift to state 68
## Reductions:

State 136:
## Known stack suffix:
## METHOD typ IDENT LPAR params RPAR BEGIN var_decls seq RETURN expression SEMI
## LR(1) items:
method_def -> METHOD typ IDENT LPAR params RPAR BEGIN var_decls seq RETURN expression SEMI . END [ METHOD END ]
## Transitions:
-- On END shift to state 137
## Reductions:

State 137:
## Known stack suffix:
## METHOD typ IDENT LPAR params RPAR BEGIN var_decls seq RETURN expression SEMI END
## LR(1) items:
method_def -> METHOD typ IDENT LPAR params RPAR BEGIN var_decls seq RETURN expression SEMI END . [ METHOD END ]
## Transitions:
## Reductions:
-- On METHOD END
--   reduce production method_def -> METHOD typ IDENT LPAR params RPAR BEGIN var_decls seq RETURN expression SEMI END

State 138:
## Known stack suffix:
## CLASS IDENT EXTENDS IDENT BEGIN attr_decls method_defs
## LR(1) items:
class_def -> CLASS IDENT EXTENDS IDENT BEGIN attr_decls method_defs . END [ MAIN CLASS ]
## Transitions:
-- On END shift to state 139
## Reductions:

State 139:
## Known stack suffix:
## CLASS IDENT EXTENDS IDENT BEGIN attr_decls method_defs END
## LR(1) items:
class_def -> CLASS IDENT EXTENDS IDENT BEGIN attr_decls method_defs END . [ MAIN CLASS ]
## Transitions:
## Reductions:
-- On MAIN CLASS
--   reduce production class_def -> CLASS IDENT EXTENDS IDENT BEGIN attr_decls method_defs END

State 140:
## Known stack suffix:
## method_def
## LR(1) items:
method_defs -> method_def . [ END ]
method_defs -> method_def . method_defs [ END ]
## Transitions:
-- On METHOD shift to state 20
-- On method_defs shift to state 141
-- On method_def shift to state 140
## Reductions:
-- On END
--   reduce production method_defs ->
-- On END
--   reduce production method_defs -> method_def
** Conflict on END

State 141:
## Known stack suffix:
## method_def method_defs
## LR(1) items:
method_defs -> method_def method_defs . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production method_defs -> method_def method_defs

State 142:
## Known stack suffix:
## attr_decl
## LR(1) items:
attr_decls -> attr_decl . [ METHOD END ]
attr_decls -> attr_decl . attr_decls [ METHOD END ]
## Transitions:
-- On ATTR shift to state 15
-- On attr_decls shift to state 143
-- On attr_decl shift to state 142
## Reductions:
-- On METHOD END
--   reduce production attr_decls ->
-- On METHOD END
--   reduce production attr_decls -> attr_decl
** Conflict on METHOD END

State 143:
## Known stack suffix:
## attr_decl attr_decls
## LR(1) items:
attr_decls -> attr_decl attr_decls . [ METHOD END ]
## Transitions:
## Reductions:
-- On METHOD END
--   reduce production attr_decls -> attr_decl attr_decls

State 144:
## Known stack suffix:
## CLASS IDENT BEGIN
## LR(1) items:
class_def -> CLASS IDENT BEGIN . attr_decls method_defs END [ MAIN CLASS ]
## Transitions:
-- On ATTR shift to state 15
-- On attr_decls shift to state 145
-- On attr_decl shift to state 142
## Reductions:
-- On METHOD END
--   reduce production attr_decls ->

State 145:
## Known stack suffix:
## CLASS IDENT BEGIN attr_decls
## LR(1) items:
class_def -> CLASS IDENT BEGIN attr_decls . method_defs END [ MAIN CLASS ]
## Transitions:
-- On METHOD shift to state 20
-- On method_defs shift to state 146
-- On method_def shift to state 140
## Reductions:
-- On END
--   reduce production method_defs ->

State 146:
## Known stack suffix:
## CLASS IDENT BEGIN attr_decls method_defs
## LR(1) items:
class_def -> CLASS IDENT BEGIN attr_decls method_defs . END [ MAIN CLASS ]
## Transitions:
-- On END shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## CLASS IDENT BEGIN attr_decls method_defs END
## LR(1) items:
class_def -> CLASS IDENT BEGIN attr_decls method_defs END . [ MAIN CLASS ]
## Transitions:
## Reductions:
-- On MAIN CLASS
--   reduce production class_def -> CLASS IDENT BEGIN attr_decls method_defs END

State 148:
## Known stack suffix:
## var_decls classes
## LR(1) items:
program -> var_decls classes . MAIN BEGIN seq END EOF [ # ]
## Transitions:
-- On MAIN shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## var_decls classes MAIN
## LR(1) items:
program -> var_decls classes MAIN . BEGIN seq END EOF [ # ]
## Transitions:
-- On BEGIN shift to state 150
## Reductions:

State 150:
## Known stack suffix:
## var_decls classes MAIN BEGIN
## LR(1) items:
program -> var_decls classes MAIN BEGIN . seq END EOF [ # ]
## Transitions:
-- On WHILE shift to state 32
-- On TRUE shift to state 34
-- On THIS shift to state 35
-- On RETURN shift to state 89
-- On PRINT shift to state 92
-- On NOT shift to state 36
-- On NEW shift to state 37
-- On MINUS shift to state 40
-- On LPAR shift to state 41
-- On INT shift to state 42
-- On IF shift to state 97
-- On IDENT shift to state 43
-- On FALSE shift to state 44
-- On seq shift to state 151
-- On mem shift to state 108
-- On instruction shift to state 112
-- On expression shift to state 114
## Reductions:
-- On END
--   reduce production seq ->

State 151:
## Known stack suffix:
## var_decls classes MAIN BEGIN seq
## LR(1) items:
program -> var_decls classes MAIN BEGIN seq . END EOF [ # ]
## Transitions:
-- On END shift to state 152
## Reductions:

State 152:
## Known stack suffix:
## var_decls classes MAIN BEGIN seq END
## LR(1) items:
program -> var_decls classes MAIN BEGIN seq END . EOF [ # ]
## Transitions:
-- On EOF shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## var_decls classes MAIN BEGIN seq END EOF
## LR(1) items:
program -> var_decls classes MAIN BEGIN seq END EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> var_decls classes MAIN BEGIN seq END EOF

State 154:
## Known stack suffix:
## class_def
## LR(1) items:
classes -> class_def . [ MAIN ]
classes -> class_def . classes [ MAIN ]
## Transitions:
-- On CLASS shift to state 10
-- On classes shift to state 155
-- On class_def shift to state 154
## Reductions:
-- On MAIN
--   reduce production classes ->
-- On MAIN
--   reduce production classes -> class_def
** Conflict on MAIN

State 155:
## Known stack suffix:
## class_def classes
## LR(1) items:
classes -> class_def classes . [ MAIN ]
## Transitions:
## Reductions:
-- On MAIN
--   reduce production classes -> class_def classes

State 156:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

